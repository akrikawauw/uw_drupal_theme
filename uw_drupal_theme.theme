<?php

/**
 * @file
 * Functions to support the UW Drupal Theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;

/**
 * UW colors.
 */
abstract class UwColor {
  const PURPLE = '#4b2e83';
  const GOLD = '#b7a57a';
  const METALLIC_GOLD = '#85754d';
  const LIGHT_GREY = '#d9d9d9';
  const DARK_GREY = '#444444';
  const BLACK = '#000000';
  const WHITE = '#ffffff';

}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 *
 * Adds additional classes to <body>.
 */
function uw_drupal_theme_preprocess_html(array &$variables): void {
  $classes = [];
  $classes[] = 'page-template';
  $classes[] = 'page-templates';
  $classes[] = 'page';
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $hero_template = theme_get_setting('uw_drupal_theme_hero_template_front');
  }
  else {
    $hero_template = theme_get_setting('uw_drupal_theme_hero_template_other');
  }
  switch ($hero_template) {
    case 'default':
      $classes[] = 'page-template-default';
      break;

    case 'big_hero':
      $classes[] = 'page-template-template-big-hero';
      $classes[] = 'page-template-big-hero';
      break;

    case 'small_hero':
      $classes[] = 'page-template-template-small-hero';
      $classes[] = 'page-template-small-hero';
      break;

    case 'jumbotron':
      $classes[] = 'page-template-template-jumbotron';
      $classes[] = 'page-template-jumbotron';
      break;

    case 'no_hero':
      $classes[] = 'page-template-template-no-hero';
      $classes[] = 'page-template-no-hero';
      break;

    case 'no_title':
      $classes[] = 'page-template-template-no-title';
      $classes[] = 'page-template-no-title';
      break;
  }

  if (array_key_exists('class', $variables['attributes'])) {
    ($variables['attributes']['class'] = array_merge($variables['attributes']['class'], $classes));
  }
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function uw_drupal_theme_preprocess_page(array &$variables): void {
  // kint($variables);
  global $base_url;
  $theme = \Drupal::theme()->getActiveTheme();
  $theme_path = $theme->getPath();

  // kint($theme_path);
  // Set base path so it's usable in templates beyond page.html.twig;
  // also set the current year.
  // $variables['base_path'] = $base_url;.
  $variables['current_year'] = date("Y");

  // shib_auth_get_login_link is the function for the new D9+ shib module
  // Jeanna Vogt worked on.
  // $variables['show_shib_link'] = function_exists('shib_auth_get_login_link') ? shib_auth_get_login_link() : FALSE;
  // $variables['login_link'] = $variables['show_shib_link'] ? 'super cool link' : Url::fromUri('internal:/user/login')->toString();
  $variables['login_url'] = theme_get_setting('uw_drupal_theme_login_url');

  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');

  $variables['uw_drupal_theme_top_links_to_dropdowns'] = theme_get_setting('uw_drupal_theme_top_links_to_dropdowns');

  // Set hero image paths.
  $variables['uw_hero_image_front_path'] = $base_url . '/' . $theme_path . theme_get_setting('uw_drupal_theme_hero_image_front_default_path');
  $variables['uw_hero_image_front_mobile_path'] = $base_url . '/' . $theme_path . theme_get_setting('uw_drupal_theme_hero_image_front_mobile_default_path');
  $variables['uw_hero_image_other_path'] = $base_url . '/' . $theme_path . theme_get_setting('uw_drupal_theme_hero_image_other_default_path');
  $variables['uw_hero_image_other_mobile_path'] = $base_url . '/' . $theme_path . theme_get_setting('uw_drupal_theme_hero_image_other_mobile_default_path');

  // If the default is overridden with a file upload,
  // reset the hero image paths.
  if ((theme_get_setting('uw_drupal_theme_hero_image_front_default') === 0) && !empty(theme_get_setting('uw_drupal_theme_hero_image_front_upload'))) {
    $hero_front = theme_get_setting('uw_drupal_theme_hero_image_front_upload');
    $fid = reset($hero_front);
    if ($file = File::load($fid)) {
      $variables['uw_hero_image_front_path'] = $file->createFileUrl(TRUE);
    }
  }
  if ((theme_get_setting('uw_drupal_theme_hero_image_default') === 0) && !empty(theme_get_setting('uw_drupal_theme_hero_image_other_upload'))) {
    $hero_other = theme_get_setting('uw_drupal_theme_hero_image_other_upload');
    $fid_other = reset($hero_other);
    if ($file_other = File::load($fid_other)) {
      $variables['uw_hero_image_other_path'] = $file_other->createFileUrl(TRUE);
    }
  }
  if (!empty(theme_get_setting('uw_drupal_theme_hero_image_front_mobile_upload'))) {
    $hero_front_mobile = theme_get_setting('uw_drupal_theme_hero_image_front_mobile_upload');
    $fid = reset($hero_front_mobile);
    if ($file = File::load($fid)) {
      $variables['uw_hero_image_front_mobile_path'] = $file->createFileUrl(TRUE);
      $variables['uw_hero_image_front_mobile'] = TRUE;
    }
  }
  else {
    $variables['uw_hero_image_front_mobile'] = FALSE;
  }
  if (!empty(theme_get_setting('uw_drupal_theme_hero_image_other_mobile_upload'))) {
    $hero_other_mobile = theme_get_setting('uw_drupal_theme_hero_image_other_mobile_upload');
    $fid = reset($hero_other_mobile);
    if ($file = File::load($fid)) {
      $variables['uw_hero_image_other_mobile_path'] = $file->createFileUrl(TRUE);
      $variables['uw_hero_image_other_mobile'] = TRUE;
    }
  }
  else {
    $variables['uw_hero_image_other_mobile'] = FALSE;
  }

  // Set hero template styles.
  $variables['uw_hero_template_type'] = $variables['is_front'] ? theme_get_setting('uw_drupal_theme_hero_template_front') : theme_get_setting('uw_drupal_theme_hero_template_other');
  $variables['uw_hero_image_path'] = $variables['is_front'] ? $variables['uw_hero_image_front_path'] : $variables['uw_hero_image_other_path'];

  if (in_array($variables['uw_hero_template_type'],
    [
      'big_hero',
      'small_hero',
      'jumbotron',
    ]
  )) {
    $variables['use_uw_hero_image_mobile'] = $variables['is_front'] ? $variables['uw_hero_image_front_mobile'] : $variables['uw_hero_image_other_mobile'];
    $variables['uw_hero_image_mobile_path'] = $variables['is_front'] ? $variables['uw_hero_image_front_mobile_path'] : $variables['uw_hero_image_other_mobile_path'];
  }
  else {
    $variables['use_uw_hero_image_mobile'] = FALSE;
  }

  // Set hero additional settings.
  $variables['uw_hero_banner'] = $variables['is_front'] ? theme_get_setting('uw_drupal_theme_hero_front_banner') : theme_get_setting('uw_drupal_theme_hero_other_banner');
  $variables['uw_hero_button_text'] = $variables['is_front'] ? theme_get_setting('uw_drupal_theme_hero_front_button_text') : theme_get_setting('uw_drupal_theme_hero_other_button_text');
  $variables['uw_hero_button_link'] = $variables['is_front'] ? theme_get_setting('uw_drupal_theme_hero_front_button_link') : theme_get_setting('uw_drupal_theme_hero_other_button_link');
  $variables['uw_hero_subhead_text'] = $variables['is_front'] ? theme_get_setting('uw_drupal_theme_hero_front_subhead_text') : theme_get_setting('uw_drupal_theme_hero_other_subhead_text');
  $variables['uw_hero_title_below'] = $variables['is_front'] ? theme_get_setting('uw_drupal_theme_hero_front_title_below') : theme_get_setting('uw_drupal_theme_hero_other_title_below');

  // Set front page title and shadow colors.
  $variables['uw_front_page_title_color'] = theme_get_setting('uw_drupal_theme_front_page_title_color');
  $variables['uw_front_page_title_text_shadow'] = _uw_drupal_theme_get_text_shadow($variables['uw_front_page_title_color']);

  // Set front slant color.
  $variables['uw_front_page_slant_color'] = theme_get_setting('uw_drupal_theme_front_page_slant_color');

  // Set front site slogan and shadow colors.
  $variables['uw_front_page_slogan_color'] = theme_get_setting('uw_drupal_theme_front_page_slogan_color');
  $variables['uw_front_page_slogan_text_shadow'] = _uw_drupal_theme_get_text_shadow($variables['uw_front_page_slogan_color']);

  // Set long site name flag.
  $variables['uw_long_site_name'] = theme_get_setting('uw_drupal_theme_long_site_name');

  // kint($variables);
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function uw_drupal_theme_preprocess_node(array &$variables): void {

}

/**
 * Implements template_preprocess_block().
 */
function uw_drupal_theme_preprocess_block(array &$variables): void {
  // If this is the uwsidebarmenu block then we build the menu.
  if (str_starts_with($variables['attributes']['id'], 'block-uw-drupal-theme-uwsidebarmenu')) {
    $variables['base_path'] = base_path();
    $variables['content'] = _uw_drupal_theme_build_uw_sidebar_menu();
  }
}

/**
 * Implements template_preprocess_breadcrumb().
 *
 * See: https://www.drupal.org/node/743366.
 */
function uw_drupal_theme_preprocess_breadcrumb(&$variables) : void {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
    if (!empty($page_title)) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
        'attributes' => new Attribute(['class' => ['current']]),
      ];
    }
    $variables['#cache']['contexts'][] = 'url';
  }
}

/**
 * Implements template_preprocess_page_title().
 */
function uw_drupal_theme_preprocess_page_title(&$variables) : void {
  // Check if we're on the home page, then get the hero_template_type selected
  // to have 'hero_template_type' available in page-title.html.twig.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['uw_hero_template_type'] = theme_get_setting('uw_drupal_theme_hero_template_front');
  }
  else {
    $variables['uw_hero_template_type'] = theme_get_setting('uw_drupal_theme_hero_template_other');
  }
}

/**
 * Builds the sidebar menu.
 *
 * @return bool|array
 *   Returns a render array of the menu if we should render the menu.
 *   Returns false if we shouldn't render it.
 */
function _uw_drupal_theme_build_uw_sidebar_menu() {
  // If the theme setting is not set to 1 (Visible), then we don't need
  // to go any further.
  if (!theme_get_setting('uw_drupal_theme_sidebar_menu_visibility')) {
    return FALSE;
  }

  $menu_name = 'main';
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $where_are_we = \Drupal::service('menu.active_trail')->getActiveLink($menu_name);
  $where_are_we_id = ($where_are_we) ? $where_are_we->getPluginId() : '';

  // kint($where_are_we);
  // kint($where_are_we_id);
  // kint($parameters);
  // If we have an empty string for $where_are_we, which is the
  // current ActiveLink, then we're at the menu root. We don't need
  // to show the sidebar menu, so return false.
  if (empty($where_are_we_id)) {
    return FALSE;
  }
  // Set the level to where we are.
  $level = count($parameters->activeTrail);
  // kint($level);
  // Only show the menu items for the current active trail and adjust the root
  // according to the current position in the menu in order to determine if we
  // can show the subtree.
  // Active trail array is child-first. Reverse it and pull the new menu
  // root based on the parent of the start level.
  $menu_trail_ids = array_reverse(array_values($parameters->activeTrail));
  // kint($menu_trail_ids);
  // Set the offset to 2 if we are past $level of 2 to prevent siblings
  // from showing if we're only 1 level beneath the main menu.
  $offset = ($level > 2 ? 2 : 1);

  // Get the menu trail id that we want to use to setRoot.
  $menu_root = $menu_trail_ids[$level - $offset];

  $parameters->setRoot($menu_root);

  // Load the tree.
  $tree = $menu_tree->load($menu_name, $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menu_tree->transform($tree, $manipulators);

  // Check the start of the tree to see if it has children.
  // If it has no children, then we don't need to show the sidebar menu.
  // The start of the tree is one above the level that we're on because of the
  // offset accomplished above.
  $tree_root_has_children = array_values($tree)[0]->hasChildren;
  if (!$tree_root_has_children) {
    return FALSE;
  }

  $build = $menu_tree->build($tree);

  // Update the items in the $build
  // We at least want to add a class for the active menu item <li>
  // we'll do this by walking through the array (if additional manipulations
  // are needed in the future, the _uw_drupal_theme_walk_tree
  // function could be enhanced).
  $build_items_walked = _uw_drupal_theme_walk_tree($build['#items'], $where_are_we_id);
  if (!$build_items_walked) {
    return FALSE;
  }
  else {
    $build['#items'] = $build_items_walked;
    $build['#title'] = [
      '#markup' => 'UW Sidebar Menu',
    ];
    $build['#theme'] = 'menu__main__uwsidebarmenu';
    // kint($build);
    return $build;
  }
}

/**
 * Local function.
 *
 * Builds a side menu based on the current path.
 *
 * @param array $build_items
 *   The render array #items to walk through.
 * @param string $menuLinkPluginId
 *   The string for the id of the current menu item we're on.
 *
 * @return array
 *   The returned array consists of render array #items
 */
function _uw_drupal_theme_walk_tree(array $build_items, $menuLinkPluginId): array {
  $build_items_revised = [];

  foreach ($build_items as $index => $item) {
    // The index of the $item is the pluginId for the menulink we're trying
    // to find.
    $compare = $index;
    if ($compare == $menuLinkPluginId) {
      // Since the menuLinkPluginId matches, add the .active class for its
      // attributes.
      $item['attributes']->addClass('active');
      $build_items_revised[$index] = $item;
    }
    else {
      // Don't add any classes, just add the item to the return array.
      $build_items_revised[$index] = $item;
    }
    if ($item['below']) {
      // MenuLinkContent has items below it, so we need to run each of those
      // through same function passing in our compare menuLinkPluginId again.
      $build_items_revised[$index]['below'] = _uw_drupal_theme_walk_tree($item['below'], $menuLinkPluginId);
    }
  }
  return $build_items_revised;
}

/**
 * Local function that gets the text-shadow setting for the provided color.
 *
 * @param string $color
 *   String containing a hex value.
 *
 * @return string
 *   The theme setting value for uw_drupal_theme_text_shadow_black or
 *   uw_drupal_theme_text_shadow_white.
 */
function _uw_drupal_theme_get_text_shadow($color) {
  $retval = '';
  switch ($color) {
    case UwColor::WHITE:
    case UwColor::LIGHT_GREY:
    case UwColor::GOLD:
    case UwColor::PURPLE:
    case UwColor::METALLIC_GOLD:
      $retval = theme_get_setting('uw_drupal_theme_text_shadow_black');
      break;

    case UwColor::DARK_GREY:
    case UwColor::BLACK:
      $retval = theme_get_setting('uw_drupal_theme_text_shadow_white');
      break;

    default:
      $retval = theme_get_setting('uw_drupal_theme_text_shadow_black');
      break;
  }
  return $retval;
}
